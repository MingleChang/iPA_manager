#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('demo:server');
const http = require('http');
const config = require('../utils/config');


const https = require('https');
const path = require('path');
const fs = require('fs');

const keyPath = path.join(__dirname, '../public/cert/server.key');
const crtPath = path.join(__dirname, '../public/cert/server.crt');

/**
 * Create HTTPS server.
 */
// const options = {
//   key: fs.readFileSync(keyPath),
//   cert: fs.readFileSync(crtPath),
// }
// const servers = https.createServer(options, app.callback());

// servers.listen(config.ports);
// servers.on('error', onError);
// servers.on('listening', onListening);

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback());

server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
